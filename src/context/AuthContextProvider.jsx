import React, { useEffect, createContext, useState } from 'react'
import { userObserver } from '../auth/firebase';

export const AuthContext = createContext();
//!1-ğŸ‘†Burada createContext metodunnu AuthContext adÄ±nÄ± verip olusturup import ettik.DÄ°KKAT!! Ä°stediÄŸimiz ismi verebiliyoruz .Ve bu contextin bir provider Ä± var.Provider'i contexti nerede kullancaksam,kullancacagÄ±m componenti sarmallÄ±yorum.
//?mesela; logini contextlicem diyelim o zaman logini provider ile sarmallÄ±yorum.

const AuthContextProvider = ({ children }) => {
    //!2-ğŸ‘†burada AuthContextProvider adÄ±ndaki componentimin tÃ¼m childlerini sarmalla diyorum.
    //! {children} bildiÄŸimiz bir props Burada bu sekilde yazarak dest yapÄ±p provider in aldtÄ±nda doÄŸrudan kullanÄ±yoruz.
    const [currentUser, setCurrentUser] = useState(false)
    //!ğŸ‘†4-Burada bir user stati olusturduk.Bunu firebase de ki kullanacak oldugum userObserver metodunda da bunu yakalÄ±yorum


    useEffect(() => {
        userObserver(setCurrentUser);
        //* ğŸ‘† Bu methodu firebaseden cagÄ±rdÄ±k *//
    }, [])


    return (
        <AuthContext.Provider value={{ currentUser }}>
          //!3-ğŸ‘†Burada ben gÃ¶nderecek oldugum deÄŸerleri sarmalladÄ±m. Ben app.js de ki sarmalladÄ±gÄ±m yapÄ±ya bir value nin iÃ§indeki currentUser i gÃ¶ndericem.
            {children}
            {/*ğŸ‘† Benim buradaki componentten gÃ¶nderecek oldugum tÃ¼m childrrenlarÄ± sarmalla diyoruz. Ve ne gÃ¶ndericeksem onu valuenin iÃ§ine yazÄ±yorum */}
        </AuthContext.Provider>
    );
    //! Ben bu AuthContext imi userda ,navbarda neredeyse heryerde kullanacagÄ±m iÃ§in bunu app.js de approuter a sarmalladÄ±m sarmallasam daha iyi olur. 

}

export default AuthContextProvider;